// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherAPI;

#nullable disable

namespace WeatherAPI.Migrations
{
    [DbContext(typeof(WeatherContext))]
    partial class WeatherContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("WeatherAPI.Models.AvgPerDayTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("AvgPerDay");
                });

            modelBuilder.Entity("WeatherAPI.Models.AvgPerHourTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("AvgPerHour");
                });

            modelBuilder.Entity("WeatherAPI.Models.AvgPerTenMinTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("AvgPerTenMin");
                });

            modelBuilder.Entity("WeatherAPI.Models.CSVMapModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("path")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("CSVMap");
                });

            modelBuilder.Entity("WeatherAPI.Models.LogsModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("applicationPart")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("message")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("WeatherAPI.Models.MaxPerDayTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("MaxPerDay");
                });

            modelBuilder.Entity("WeatherAPI.Models.MaxPerHourTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("MaxPerHour");
                });

            modelBuilder.Entity("WeatherAPI.Models.MinPerDayTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("MinPerDay");
                });

            modelBuilder.Entity("WeatherAPI.Models.MinPerHourTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("MinPerHour");
                });

            modelBuilder.Entity("WeatherAPI.Models.RawDataTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("delay")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTempBatteryStatus")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rxCheckPercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("usUnits")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("RawData");
                });

            modelBuilder.Entity("WeatherAPI.Models.TodayRawTableModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("altimeter_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("appTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("barometer_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("cloudbase_meter")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dayRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("delay")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("dewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("heatindex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("hourRain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("humidex_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inDewpoint_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("inTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("maxSolarRad_Wpm2")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outHumidity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTempBatteryStatus")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("outTemp_C")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("pressure_mbar")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain24_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainRate_mm_per_hour")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rainTotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rain_mm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("rxCheckPercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("DateTime");

                    b.Property<decimal?>("usUnits")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windDir")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windGust_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windSpeed_mps")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("windchill_C")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("TodayRaw");
                });
#pragma warning restore 612, 618
        }
    }
}
